package vulnerabilityreport_test

import (
	"context"
	"testing"

	"github.com/AlaskaAirlines/starboard/pkg/starboard"

	"github.com/stretchr/testify/assert"
	"k8s.io/apimachinery/pkg/types"

	"github.com/AlaskaAirlines/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/AlaskaAirlines/starboard/pkg/vulnerabilityreport"
	"github.com/stretchr/testify/require"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"
)

func TestStore_Save(t *testing.T) {

	kubernetesScheme := starboard.NewScheme()

	t.Run("Should create VulnerabilityReports", func(t *testing.T) {

		client := fake.NewFakeClientWithScheme(kubernetesScheme)
		store := vulnerabilityreport.NewStore(client, kubernetesScheme)
		err := store.Save(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container1",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container1",
						"pod-spec-hash":                "h1",
					},
				},
			},
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container2",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container2",
						"pod-spec-hash":                "h1",
					},
				},
			},
		})
		require.NoError(t, err)

	})

	t.Run("Should update VulnerabilityReports", func(t *testing.T) {
		client := fake.NewFakeClientWithScheme(kubernetesScheme,
			&v1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container1",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container1",
						"pod-spec-hash":                "h1",
					},
				},
			},
			&v1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container2",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container2",
						"pod-spec-hash":                "h2",
					},
				},
			})
		store := vulnerabilityreport.NewStore(client, kubernetesScheme)
		err := store.Save(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container1",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container1",
						"pod-spec-hash":                "h2",
					},
				},
			},
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container2",
					Namespace: "qa",
					Labels: map[string]string{
						"starboard.resource.kind":      "Deployment",
						"starboard.resource.name":      "app1",
						"starboard.resource.namespace": "qa",
						"starboard.container.name":     "container2",
						"pod-spec-hash":                "h2",
					},
				},
			},
		})
		require.NoError(t, err)

		var found v1alpha1.VulnerabilityReport
		err = client.Get(context.TODO(), types.NamespacedName{
			Namespace: "qa",
			Name:      "deployment-app1-container1",
		}, &found)
		require.NoError(t, err)
		assert.Equal(t, v1alpha1.VulnerabilityReport{
			TypeMeta: metav1.TypeMeta{
				APIVersion: "aquasecurity.github.io/v1alpha1",
				Kind:       "VulnerabilityReport",
			},
			ObjectMeta: metav1.ObjectMeta{
				ResourceVersion: "1",
				Name:            "deployment-app1-container1",
				Namespace:       "qa",
				Labels: map[string]string{
					"starboard.resource.kind":      "Deployment",
					"starboard.resource.name":      "app1",
					"starboard.resource.namespace": "qa",
					"starboard.container.name":     "container1",
					"pod-spec-hash":                "h2",
				},
			},
		}, found)

		err = client.Get(context.TODO(), types.NamespacedName{
			Namespace: "qa",
			Name:      "deployment-app1-container2",
		}, &found)
		require.NoError(t, err)
		assert.Equal(t, v1alpha1.VulnerabilityReport{
			TypeMeta: metav1.TypeMeta{
				APIVersion: "aquasecurity.github.io/v1alpha1",
				Kind:       "VulnerabilityReport",
			},
			ObjectMeta: metav1.ObjectMeta{
				ResourceVersion: "1",
				Name:            "deployment-app1-container2",
				Namespace:       "qa",
				Labels: map[string]string{
					"starboard.resource.kind":      "Deployment",
					"starboard.resource.name":      "app1",
					"starboard.resource.namespace": "qa",
					"starboard.container.name":     "container2",
					"pod-spec-hash":                "h2",
				},
			},
		}, found)
	})
}

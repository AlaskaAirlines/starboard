package vulnerabilityreport

import (
	"context"

	starboard "github.com/AlaskaAirlines/starboard/pkg/apis/aquasecurity/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/klog"

	clientset "github.com/AlaskaAirlines/s/starboard/pkg/generated/clientset/versioned"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/AlaskaAirlines/s/starboard/pkg/kube"
)

// WorkloadVulnerabilities holds VulnerabilityReports for each container
// of a Kubernetes workload.
// Deprecated use a slice of VulnerabilityReports instead
type WorkloadVulnerabilities map[string]starboard.VulnerabilityScanResult

type Writer interface {
	Write(context.Context, []starboard.VulnerabilityReport) error
}

type Reader interface {
	FindByOwner(context.Context, kube.Object) ([]starboard.VulnerabilityReport, error)
}

type ReadWriter interface {
	Reader
	Writer
}

type readWriter struct {
	client clientset.Interface
}

func NewReadWriter(client clientset.Interface) ReadWriter {
	return &readWriter{
		client: client,
	}
}

func (s *readWriter) Write(ctx context.Context, reports []starboard.VulnerabilityReport) error {
	for _, report := range reports {
		err := s.createOrUpdate(ctx, report)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s *readWriter) createOrUpdate(ctx context.Context, report starboard.VulnerabilityReport) error {
	existing, err := s.client.AquasecurityV1alpha1().VulnerabilityReports(report.Namespace).
		Get(ctx, report.Name, metav1.GetOptions{})

	if err == nil {
		klog.V(3).Infof("Updating VulnerabilityReport %q", report.Namespace+"/"+report.Name)
		deepCopy := existing.DeepCopy()
		deepCopy.Labels = report.Labels
		deepCopy.Report = report.Report

		_, err = s.client.AquasecurityV1alpha1().VulnerabilityReports(report.Namespace).
			Update(ctx, deepCopy, metav1.UpdateOptions{})
		return err
	}

	if errors.IsNotFound(err) {
		klog.V(3).Infof("Creating VulnerabilityReport %q", report.Namespace+"/"+report.Name)
		_, err = s.client.AquasecurityV1alpha1().VulnerabilityReports(report.Namespace).
			Create(ctx, &report, metav1.CreateOptions{})
		return err
	}

	return err
}

func (s *readWriter) FindByOwner(ctx context.Context, owner kube.Object) ([]starboard.VulnerabilityReport, error) {
	list, err := s.client.AquasecurityV1alpha1().VulnerabilityReports(owner.Namespace).List(ctx, metav1.ListOptions{
		LabelSelector: labels.Set{
			kube.LabelResourceKind:      string(owner.Kind),
			kube.LabelResourceName:      owner.Name,
			kube.LabelResourceNamespace: owner.Namespace,
		}.String(),
	})
	if err != nil {
		return nil, err
	}
	return list.DeepCopy().Items, nil
}

package vulnerabilityreport_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"k8s.io/apimachinery/pkg/labels"

	"github.com/AlaskaAirlines/starboard/pkg/vulnerabilityreport"

	"github.com/AlaskaAirlines/s/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/AlaskaAirlines/s/starboard/pkg/generated/clientset/versioned/fake"
	"github.com/AlaskaAirlines/s/starboard/pkg/kube"
	"github.com/stretchr/testify/require"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func TestReadWriter_Read(t *testing.T) {

	t.Run("Should create VulnerabilityReport", func(t *testing.T) {
		clientset := fake.NewSimpleClientset()
		err := vulnerabilityreport.NewReadWriter(clientset).Write(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "qa",
					Name:      "deployment-app-c1",
					Labels: map[string]string{
						kube.LabelResourceKind:      "Deployment",
						kube.LabelResourceName:      "app",
						kube.LabelResourceNamespace: "qa",
						kube.LabelContainerName:     "c1",
						kube.LabelPodSpecHash:       "abc",
					},
				},
			},
			{
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "qa",
					Name:      "deployment-app-c2",
					Labels: map[string]string{
						kube.LabelResourceKind:      "Deployment",
						kube.LabelResourceName:      "app",
						kube.LabelResourceNamespace: "qa",
						kube.LabelContainerName:     "c2",
						kube.LabelPodSpecHash:       "def",
					},
				},
			},
		})
		require.NoError(t, err)
		list, err := clientset.AquasecurityV1alpha1().VulnerabilityReports("qa").
			List(context.TODO(), metav1.ListOptions{LabelSelector: labels.Set{
				kube.LabelResourceKind: "Deployment",
				kube.LabelResourceName: "app"}.String(),
			})
		require.NoError(t, err)
		reports := map[string]bool{}
		for _, item := range list.Items {
			reports[item.Name] = true
		}
		assert.Equal(t, map[string]bool{
			"deployment-app-c1": true,
			"deployment-app-c2": true,
		}, reports)
	})

	t.Run("Should update VulnerabilityReport", func(t *testing.T) {
		clientset := fake.NewSimpleClientset(&v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "qa",
				Name:      "deployment-nginx",
				Labels: map[string]string{
					kube.LabelResourceKind:      "Deployment",
					kube.LabelResourceName:      "nginx",
					kube.LabelResourceNamespace: "qa",
					kube.LabelContainerName:     "nginx",
					kube.LabelPodSpecHash:       "abc",
				},
			},
		})
		err := vulnerabilityreport.NewReadWriter(clientset).Write(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "qa",
					Name:      "deployment-nginx",
					Labels: map[string]string{
						kube.LabelResourceKind:      "Deployment",
						kube.LabelResourceName:      "nginx",
						kube.LabelResourceNamespace: "qa",
						kube.LabelContainerName:     "nginx",
						kube.LabelPodSpecHash:       "xyz",
					},
				},
			},
		})
		require.NoError(t, err)
		report, err := clientset.AquasecurityV1alpha1().VulnerabilityReports("qa").Get(context.TODO(), "deployment-nginx", metav1.GetOptions{})
		require.NoError(t, err)
		assert.Equal(t, "deployment-nginx", report.Name)
		assert.Equal(t, map[string]string{
			kube.LabelResourceKind:      "Deployment",
			kube.LabelResourceName:      "nginx",
			kube.LabelResourceNamespace: "qa",
			kube.LabelContainerName:     "nginx",
			kube.LabelPodSpecHash:       "xyz",
		}, report.Labels)
	})

	t.Run("Should find VulnerabilityReports", func(t *testing.T) {
		clientset := fake.NewSimpleClientset(&v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "deployment-my-deploy-my-container-01",
				Labels: map[string]string{
					kube.LabelResourceKind:      string(kube.KindDeployment),
					kube.LabelResourceName:      "my-deploy",
					kube.LabelResourceNamespace: "my-namespace",
					kube.LabelContainerName:     "my-container-01",
				},
			},
			Report: v1alpha1.VulnerabilityScanResult{},
		}, &v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "deployment-my-deploy-my-container-02",
				Labels: map[string]string{
					kube.LabelResourceKind:      string(kube.KindDeployment),
					kube.LabelResourceName:      "my-deploy",
					kube.LabelResourceNamespace: "my-namespace",
					kube.LabelContainerName:     "my-container-02",
				},
			},
			Report: v1alpha1.VulnerabilityScanResult{},
		}, &v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "my-sts",
				Labels: map[string]string{
					kube.LabelResourceKind:      string(kube.KindStatefulSet),
					kube.LabelResourceName:      "my-sts",
					kube.LabelResourceNamespace: "my-namespace",
					kube.LabelContainerName:     "my-sts-container",
				},
			},
			Report: v1alpha1.VulnerabilityScanResult{},
		})

		list, err := vulnerabilityreport.NewReadWriter(clientset).FindByOwner(context.TODO(), kube.Object{
			Kind:      kube.KindDeployment,
			Name:      "my-deploy",
			Namespace: "my-namespace",
		})
		require.NoError(t, err)
		reports := map[string]bool{}
		for _, item := range list {
			reports[item.Name] = true
		}
		assert.Equal(t, map[string]bool{
			"deployment-my-deploy-my-container-01": true,
			"deployment-my-deploy-my-container-02": true,
		}, reports)
	})

}
